package com.wangku.library.utils;

import android.content.Context;
import android.content.res.Resources;
import android.graphics.drawable.Drawable;
import android.text.TextUtils;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * 内容摘要：资源文件工具类
 */
public class ResourceUtils {

    /**
     * 从Assets中获取文件
     *
     * @param context 上下文对象
     * @param fileName 文件名
     * @return 文件的内容
     */
    public static String geFileFromAssets(Context context, String fileName) {
        if (context == null || TextUtils.isEmpty(fileName)) {
            return null;
        }

        StringBuilder s = new StringBuilder("");
        try {
            InputStreamReader in = new InputStreamReader(context.getResources().getAssets().open(fileName));
            BufferedReader br = new BufferedReader(in);
            String line;
            while ((line = br.readLine()) != null) {
                s.append(line);
            }
            return s.toString();
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * 从Assets中获取文件
     *
     * @param context
     * @param resId The resource identifier to open, as generated by the appt tool.
     * @return
     */
    public static String geFileFromRaw(Context context, int resId) {
        if (context == null) {
            return null;
        }

        StringBuilder s = new StringBuilder();
        try {
            InputStreamReader in = new InputStreamReader(context.getResources().openRawResource(
                    resId));
            BufferedReader br = new BufferedReader(in);
            String line;
            while ((line = br.readLine()) != null) {
                s.append(line);
            }
            return s.toString();
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    /**
     * 根据resId获取对应的Drawable对象
     *
     * @param context 上下文对象
     * @param resId 资源id
     * @return 返回的Drawable对象
     */
    public static Drawable getDrawableByResId(Context context, int resId) {
        Resources resources = context.getResources();
        Drawable drawable = resources.getDrawable(resId);
        return drawable;
    }

    public static String getString(Context context, int resId) {
        Resources resources = context.getResources();
        String text = resources.getString(resId);
        return text;
    }

    /**
     * 得到字符串数据
     *
     * @param context
     * @param arrayResId
     * @return
     */
    public static String[] getStringArr(Context context, int arrayResId) {
        Resources resources = context.getResources();
        String[] array = resources.getStringArray(arrayResId);
        return array;
    }

    /**
     * 根据传入的格式，获取对应格式化话的字符串
     *
     * @param context 上下文对象
     * @param formatResId 传入的格式resId
     * @param args 替换的操作列表
     * @return 格式化后的字符串
     */
    public static String getFormatString(Context context, int formatResId, Object... args) {
        String format = context.getString(formatResId);
        String result = String.format(format, args);
        return result;
    }

    public static int getColor(Context context, int colorResId) {
        return context.getResources().getColor(colorResId);
    }
}
